package com.kittera.crypto487.lib;

import com.kittera.crypto487.lib.enums.KeccakBlockSize;
import org.junit.jupiter.api.Test;

import java.math.BigInteger;
import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.assertEquals;

class KeccakFTest {
   
   @Test
   void testRotNBitsLeft() {
      BigInteger expected = BigInteger.valueOf(0x56A5514AB2956AAAL);
      assertEquals(expected, BigInteger.valueOf(
            KeccakF.rotNBitsLeft(0x2B52A8A5594AB555L, 1, 64)),
            "Testing a bit rotation to the left (wrapping around)"
      );
      
      assertEquals(expected,
            BigInteger.valueOf(
                  KeccakF.rotNBitsLeft(0x56A5514AB2956AAAL, 0, 64)),
            "Testing a bit rotation to the left (wrapping around)"
      );
   }
   
   @Test
   void testApplyEmpty() {
      byte[] zeroBytes = new byte[200];
      Arrays.fill(zeroBytes, (byte) 0x00);
      KeccakF testPerm = new KeccakF(24, KeccakBlockSize.KECCAK_1600);
      testPerm.apply(zeroBytes);
   }
   
   
   @Test
   void testApplyVu() {
      byte[] zeroBytes = new byte[200];
      Arrays.fill(zeroBytes, (byte) 0x00);
      KeccakF testPerm = new KeccakF(24, KeccakBlockSize.KECCAK_1600);
      zeroBytes[0] = (byte) 0x1F;
      zeroBytes[135] = (byte) 0x80;
      testPerm.apply(zeroBytes);
   }
   
   
   @Test
   void testApply() {
      byte[] resultOfZeroBytes = new byte[]{(byte) 0xE7, (byte) 0xDD, (byte) 0xE1, (byte) 0x40, (byte) 0x79, (byte) 0x8F, (byte) 0x25, (byte) 0xF1, (byte) 0x8A, (byte) 0x47, (byte) 0xC0, (byte) 0x33, (byte) 0xF9, (byte) 0xCC, (byte) 0xD5, (byte) 0x84, (byte) 0xEE, (byte) 0xA9, (byte) 0x5A, (byte) 0xA6, (byte) 0x1E, (byte) 0x26, (byte) 0x98, (byte) 0xD5, (byte) 0x4D, (byte) 0x49, (byte) 0x80, (byte) 0x6F, (byte) 0x30, (byte) 0x47, (byte) 0x15, (byte) 0xBD, (byte) 0x57, (byte) 0xD0, (byte) 0x53, (byte) 0x62, (byte) 0x05, (byte) 0x4E, (byte) 0x28, (byte) 0x8B, (byte) 0xD4, (byte) 0x6F, (byte) 0x8E, (byte) 0x7F, (byte) 0x2D, (byte) 0xA4, (byte) 0x97, (byte) 0xFF, (byte) 0xC4, (byte) 0x47, (byte) 0x46, (byte) 0xA4, (byte) 0xA0, (byte) 0xE5, (byte) 0xFE, (byte) 0x90, (byte) 0x76, (byte) 0x2E, (byte) 0x19, (byte) 0xD6, (byte) 0x0C, (byte) 0xDA, (byte) 0x5B, (byte) 0x8C, (byte) 0x9C, (byte) 0x05, (byte) 0x19, (byte) 0x1B, (byte) 0xF7, (byte) 0xA6, (byte) 0x30, (byte) 0xAD, (byte) 0x64, (byte) 0xFC, (byte) 0x8F, (byte) 0xD0, (byte) 0xB7, (byte) 0x5A, (byte) 0x93, (byte) 0x30, (byte) 0x35, (byte) 0xD6, (byte) 0x17, (byte) 0x23, (byte) 0x3F, (byte) 0xA9, (byte) 0x5A, (byte) 0xEB, (byte) 0x03, (byte) 0x21, (byte) 0x71, (byte) 0x0D, (byte) 0x26, (byte) 0xE6, (byte) 0xA6, (byte) 0xA9, (byte) 0x5F, (byte) 0x55, (byte) 0xCF, (byte) 0xDB, (byte) 0x16, (byte) 0x7C, (byte) 0xA5, (byte) 0x81, (byte) 0x26, (byte) 0xC8, (byte) 0x47, (byte) 0x03, (byte) 0xCD, (byte) 0x31, (byte) 0xB8, (byte) 0x43, (byte) 0x9F, (byte) 0x56, (byte) 0xA5, (byte) 0x11, (byte) 0x1A, (byte) 0x2F, (byte) 0xF2, (byte) 0x01, (byte) 0x61, (byte) 0xAE, (byte) 0xD9, (byte) 0x21, (byte) 0x5A, (byte) 0x63, (byte) 0xE5, (byte) 0x05, (byte) 0xF2, (byte) 0x70, (byte) 0xC9, (byte) 0x8C, (byte) 0xF2, (byte) 0xFE, (byte) 0xBE, (byte) 0x64, (byte) 0x11, (byte) 0x66, (byte) 0xC4, (byte) 0x7B, (byte) 0x95, (byte) 0x70, (byte) 0x36, (byte) 0x61, (byte) 0xCB, (byte) 0x0E, (byte) 0xD0, (byte) 0x4F, (byte) 0x55, (byte) 0x5A, (byte) 0x7C, (byte) 0xB8, (byte) 0xC8, (byte) 0x32, (byte) 0xCF, (byte) 0x1C, (byte) 0x8A, (byte) 0xE8, (byte) 0x3E, (byte) 0x8C, (byte) 0x14, (byte) 0x26, (byte) 0x3A, (byte) 0xAE, (byte) 0x22, (byte) 0x79, (byte) 0x0C, (byte) 0x94, (byte) 0xE4, (byte) 0x09, (byte) 0xC5, (byte) 0xA2, (byte) 0x24, (byte) 0xF9, (byte) 0x41, (byte) 0x18, (byte) 0xC2, (byte) 0x65, (byte) 0x04, (byte) 0xE7, (byte) 0x26, (byte) 0x35, (byte) 0xF5, (byte) 0x16, (byte) 0x3B, (byte) 0xA1, (byte) 0x30, (byte) 0x7F, (byte) 0xE9, (byte) 0x44, (byte) 0xF6, (byte) 0x75, (byte) 0x49, (byte) 0xA2, (byte) 0xEC, (byte) 0x5C, (byte) 0x7B, (byte) 0xFF, (byte) 0xF1, (byte) 0xEA};
      KeccakF testPerm = new KeccakF(24, KeccakBlockSize.KECCAK_1600);
      testPerm.apply(resultOfZeroBytes);
   }
}
